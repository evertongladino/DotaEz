swagger: "2.0"
info:
  version: "1.0.0"
  title: Swagger DotaEz
  contact:
    name: Everton Galdino da Silva
basePath: /api
schemes:
  - http
  - https
paths:
  /hero:
    post:
      tags:
        - hero
      summary: Add a new hero
      description: ""
      operationId: addHero
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Hero
          description: Hero object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/Hero"
      responses:
        "405":
          description: Invalid input
    put:
      tags:
        - hero
      summary: Update an existing hero
      description: ""
      operationId: updateHero
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Hero object that needs to be added to the store
          required: false
          schema:
            $ref: "#/definitions/Hero"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Hero not found
        "400":
          description: Invalid ID supplied
  /hero/findByName:
    get:
      tags:
        - hero
      summary: Find Hero by Name
      description: ""
      operationId: findHeroByName
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: status
          description: Names values that need to be considered for filter
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
            items:
              $ref: "#/definitions/Hero"
        "400":
          description: Invalid name value
  /hero/findByTypeHero:
    get:
      tags:
        - hero
      summary: Find hero by types
      description: ""
      operationId: findHeroByTypeHero
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: tags
          description: Tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
             $ref: "#/definitions/Hero"
        "400":
          description: Invalid tag value
  /hero/{heroId}:
    delete:
      tags:
        - hero
      summary: Deletes a hero
      description: ""
      operationId: deleteHero
      produces:
        - application/json
        - application/xml
      parameters:
        - in: header
          name: heroId
          description: ""
          required: true
          type: string
        - in: path
          name: heroId
          description: Hero id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid Hero value
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Created user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/findByName:
    get:
      tags:
        - user
      summary: Find Hero by Name
      description: ""
      operationId: findUserByName
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: status
          description: Names values that need to be considered for filter
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
            items:
              $ref: "#/definitions/User"
        "400":
          description: Invalid name value
  /users/findByLogin:
    get:
      tags:
        - user
      summary: Find Hero by Login
      description: ""
      operationId: findUserByLogin
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: status
          description: Logins values that need to be considered for filter
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
            items:
              $ref: "#/definitions/User"
        "400":
          description: Invalid name value
  /users/findBynickNameDOTA:
    get:
      tags:
        - user
      summary: Find Hero by Nick
      description: ""
      operationId: findUserBynickNameDOTA
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: status
          description: NickNames values that need to be considered for filter
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
            items:
              $ref: "#/definitions/User"
        "400":
          description: Invalid name value
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: name that need to be deleted
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid user supplied
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid username supplied
  /build:
    post:
      tags:
        - build
      summary: Add a new build
      description: ""
      operationId: addBuild
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Build
          description: build object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/Build"
      responses:
        "405":
          description: Invalid input
    put:
      tags:
        - build
      summary: Update an existing build
      description: ""
      operationId: updatebuild
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: build object that needs to be added to the store
          required: false
          schema:
            $ref: "#/definitions/Build"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Hero not found
        "400":
          description: Invalid ID supplied
    get:
      tags:
        - build
      summary: Find Build by Name
      description: ""
      operationId: findBuildByName
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: status
          description: Names values that need to be considered for filter
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
            items:
              $ref: "#/definitions/Build"
        "400":
          description: Invalid name value
  /build/{buildId}:
    delete:
      tags:
        - build
      summary: Deletes a build
      description: ""
      operationId: deleteBuild
      produces:
        - application/json
        - application/xml
      parameters:
        - in: header
          name: buildId
          description: ""
          required: true
          type: string
        - in: path
          name: buildId
          description: Build id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid Build value
  /skill:
    post:
      tags:
        - skill
      summary: Add a new skill
      description: ""
      operationId: addSkill
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Skill
          description: Skill object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/Skill"
      responses:
        "405":
          description: Invalid input
    put:
      tags:
        - skill
      summary: Update an existing skill
      description: ""
      operationId: updateSkill
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Skill object that needs to be added to the store
          required: false
          schema:
            $ref: "#/definitions/Skill"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Hero not found
        "400":
          description: Invalid ID supplied
    get:
      tags:
        - skill
      summary: Find skill by Name
      description: ""
      operationId: findSkillByName
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: status
          description: Names values that need to be considered for filter
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
            items:
              $ref: "#/definitions/Skill"
        "400":
          description: Invalid name value
  /skill/{skillId}:
    delete:
      tags:
        - skill
      summary: Deletes a skill
      description: ""
      operationId: deleteSkill
      produces:
        - application/json
        - application/xml
      parameters:
        - in: header
          name: skillId
          description: ""
          required: true
          type: string
        - in: path
          name: skillId
          description: Skill id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid Skill value
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      Login:
        type: string
      email:
        type: string
      password:
        type: string
      nickNameDOTA:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
  Skill:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      effect:
        type: string
      dano:
        type: integer
      typeDano:
        type: string
      hero:
        $ref: "#/definitions/Hero"
        
  Hero:
    type: object
    properties:
      id:
        type: integer
      skill:
        $ref: "#/definitions/Skill"
      name:
        type: string
      typeHero:
        $ref: "#/definitions/TypeHero"
      status:
        $ref: "#/definitions/Status"
      build:
        $ref: "#/definitions/Build"
        
  TypeHero:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Build:
    type: object
    properties:
      id:
        type: integer
        format: int64
      hero:
        $ref: "#/definitions/Hero"
      item:
        $ref: "#/definitions/Item"
      author:
        type: string
  Item:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      effect:
        type: string
      Dano:
        type: integer
        format: int64
      typeItem:
        type: string
  Status:
    type: object
    properties:
      strenght:
        type: string
      agility:
        type: string
      intellect:
        type: string

        